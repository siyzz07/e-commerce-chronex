<%- include('../layout/header.ejs') %>
<style>
    * {
        box-sizing: border-box;
    }

    body {
        margin: 0;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
    }

    h1 {
        color: #000;
        text-align: center;
        margin: 0;
        margin-bottom: 10px;
    }

    form {
        width: 400px;
        background-color: rgba(255, 255, 255, 1);
        padding: 20px;
        border-radius: 12px;
        z-index: 9999;
        box-shadow: 0px 0px 10px #fff;
    }

    form input {
        width: 100%;
        padding: 12px;
        border: 1px solid black;
        border-radius: 8px;
        margin-bottom: 15px;
        font-size: 16px;
    }

    form input:focus {
        outline: none;
        border-color: #394867;
        transition: .3s;
    }

    form label {
        position: relative;
        height: 100%;
        display: block;
    }

    form input[type="submit"] {
        border: none;
        background-color: #394867;
        color: #fff;
    }

    form label span {
        font-size: 10px;
        position: absolute;
        top: -7px;
        left: 20px;
        transition: .3s;
        background-color: #fff;
        padding: 2px;
    }

    label > input:focus + span {
        color: #394867;
        font-size: 12px;
        transition: .3s;
        top: -10px;
    }

    .termofuse {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .termofuse input[type="checkbox"] {
        width: 15px;
        height: 15px;
        margin: 0;
    }

    .termofuse a {
        color: #394867;
        text-decoration: none;
    }

    .left {
        background: #000;
        width: 50%;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .left img {
        width: 100%;
        max-width: 90%; /* Limits max size of the image to 90% of the container width */
        height: auto;
        border-radius: 10px;
    }

    .right {
        width: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    @media (max-width: 726px) {
        .left {
            display: none;
        }

        .right {
            width: 100%; /* Make the right div take full width */
            justify-content: center;
            align-items: center;
        }

        form {
            width: 90%; /* Adjust form width for smaller screens */
        }
    }

    /* Resend button styles */
    .resend {
        display: flex;
        justify-content: flex-end; /* Aligns resend OTP to the right */
        margin-bottom: 15px;
        gap: 10px; /* Adds space between resend link and timer */
    }

    .resend a {
        color: #2e5095;
        text-decoration: none;
        /* pointer-events: none; Disable the resend OTP link initially
        opacity: 0.5; Make it look disabled */
    }

    .resend a.active {
        pointer-events: auto; /* Enable the resend OTP link */
        opacity: 1;
    }

    .resend a:hover {
        text-decoration: underline;
    }

    /* Style for timer */
    #timer {
        margin-left: 15px; /* Adds spacing between the resend link and the timer */
        font-size: 15px;    /* Adjusts the timer font size */
        color: #6c6767;     /* Optional: change the color of the timer text */
    }

</style>
</head>
<body>
    
<div style="display: flex; width: 100%; height: 100vh;">

  <div class="left">
    <!-- Responsive image -->
    <img src="images/logi_white.png" alt="Car Image">
  </div>

  <div class="right">
    <form action="/otpverification" method="post">
        <h1>OTP VERIFICATION</h1>
        <br>

        <p style="color: #6c6767;">Enter the 6 digit OTP that you will receive in your registered Email</p>
        <P style="color: rgb(255, 23, 23); text-align: center;"><%= fail %></P> 

        <input type="" name="id" value="<%= id %>"> 

        
       

        <label for="userotp">
          <input type="text" name="userotp" id="userotp"  placeholder="Enter OTP">
          <span>OTP</span>
        </label>
        
        <br>
        <input type="submit" value="Submit">
        <!-- Resend link and timer -->
        <div id="timer"></div>
<a id="resend-otp" href="/resendotp?id=<%= id %>" style="display: none;">Resend OTP</a>


       
    </form>
  </div>

</div>

<%- include('../layout/footer.ejs') %>

<script>



// Check if an existing expiration time is stored in localStorage
let otpExpiryTime = localStorage.getItem('otpExpiryTime');

// If no expiry time exists, set a new one (OTP valid for 5 minutes)
if (!otpExpiryTime) {
    const expiryTime = new Date(Date.now() + 2 * 60000).getTime(); // 2 minutes from now
    localStorage.setItem('otpExpiryTime', expiryTime);
    otpExpiryTime = expiryTime;
} else {
    otpExpiryTime = parseInt(otpExpiryTime);
}

// Timer logic
const timerDisplay = document.getElementById('timer');
const resendLink = document.getElementById('resend-otp');

const timerInterval = setInterval(() => {
    const now = new Date().getTime();
    const timeLeft = otpExpiryTime - now;

    if (timeLeft <= 0) {
        clearInterval(timerInterval);
        //  timerDisplay.innerHTML = 'OTP expired';
        resendLink.style.display = 'inline'; // Show resend link
        localStorage.removeItem('otpExpiryTime'); // Clear the OTP expiration from localStorage
    } else {
        const minutes = Math.floor(timeLeft / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
        timerDisplay.innerHTML = `${minutes}m ${seconds < 10 ? '0' : ''}${seconds}s remaining`;
    }
}, 1000);

// When the "resend OTP" link is clicked
resendLink.addEventListener('click', () => {
    // Reset the OTP expiration time
    const newExpiryTime = new Date(Date.now() + 2 * 60000).getTime(); // New 2 minutes from now
    localStorage.setItem('otpExpiryTime', newExpiryTime);
    location.reload(); // Reload the page to start a new timer
});







// // Countdown logic
// const otpExpiry = new Date(Date.now() + 5 * 60000); // OTP valid for 5 minutes

// const timerInterval = setInterval(() => {
//   const now = new Date();
//   const timeLeft = otpExpiry - now;

//   if (timeLeft <= 0) {
//     clearInterval(timerInterval);
//     document.getElementById('timer').innerHTML = 'OTP expired';
//     document.getElementById('resend-otp').style.display = 'inline';
//   } else {
//     const minutes = Math.floor(timeLeft / (1000 * 60));
//     const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
//     document.getElementById('timer').innerHTML = `${minutes}m ${seconds}s remaining`;
//   }
// }, 1000);





//   // Timer setup
// const totalTime = 300; // 5 minutes in seconds
// const timerDisplay = document.getElementById('timer');
// const resendLink = document.getElementById('resend-link');

// // Check if timer data exists in localStorage
// let startTime = localStorage.getItem('otpStartTime');

// // If no startTime is found, set a new one
// if (!startTime) {
//   startTime = Date.now(); // Store the current time
//   localStorage.setItem('otpStartTime', startTime); // Save it in localStorage
// }

// const timerInterval = setInterval(() => {
//   const currentTime = Date.now();
//   const elapsedTime = Math.floor((currentTime - startTime) / 1000); // Time elapsed in seconds

//   const timeLeft = totalTime - elapsedTime;

//   if (timeLeft > 0) {
//     const minutes = Math.floor(timeLeft / 60);
//     const seconds = timeLeft % 60;
//     timerDisplay.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
//   } else {
//     clearInterval(timerInterval);
//     timerDisplay.textContent = ''; // Clear timer text
//     resendLink.classList.add('active'); // Enable the resend link
//     localStorage.removeItem('otpStartTime'); // Clear the start time when timer ends
//   }
// }, 1000);

</script>
